{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","filter","defaultFilter","query","status","All","filterReducer","todos","todosReducer","id","map","includes","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoInfo","title","completed","dispatch","isSelected","className","cn","onClick","TodoList","length","TodoFilter","todoStatusFilter","value","onChange","event","target","filterActions","Object","values","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","modalUser","setModalUser","isLoading","setIsLoading","error","setError","loadUser","a","userId","userFromServer","useEffect","todoActions","href","name","App","selectedTodo","setLoading","loadTodos","todosFromServer","filteredTodos","Active","Complited","Error","lowerQuery","toLowerCase","trim","getFilteredTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3a94be5.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Complited = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { FilterType } from '../types/FilterType';\nimport { Status } from '../types/Status';\n\ntype SetAction = { type: 'filter/set', payload: FilterType };\ntype ClearAction = { type: 'filter/clear' };\n\ntype Action = SetAction | ClearAction;\n\nconst set = (filter : FilterType): SetAction => ({\n  type: 'filter/set',\n  payload: filter,\n});\n\nconst clear = (): ClearAction => ({ type: 'filter/clear' });\n\nexport const actions = { set, clear };\n\nconst defaultFilter: FilterType = {\n  query: '',\n  status: Status.All,\n};\n\nconst filterReducer = (\n  filter = defaultFilter,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/set':\n    { const { query, status } = action.payload;\n\n      return {\n        query,\n        status,\n      };\n    }\n\n    case 'filter/clear':\n      return defaultFilter;\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = { type: 'todo/add', payload: Todo[] };\ntype RemoveAction = { type: 'todo/remove', payload: Todo[] };\ntype ClearAction = { type: 'todo/clear' };\n\ntype Action = AddAction | RemoveAction | ClearAction;\n\nconst add = (todos: Todo[]): AddAction => ({\n  type: 'todo/add',\n  payload: todos,\n});\n\nconst remove = (todos: Todo[]): RemoveAction => ({\n  type: 'todo/remove',\n  payload: todos,\n});\n\nconst clear = (): ClearAction => ({ type: 'todo/clear' });\n\nexport const actions = { add, remove, clear };\n\nconst todosReducer = (todos = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todo/add':\n      return [...todos, ...action.payload];\n\n    case 'todo/remove':\n      return todos\n        .filter(({ id }) => !action.payload\n          .map(todo => todo.id).includes(id));\n\n    case 'todo/clear':\n      return [];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import cn from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\nimport { useAppSelector } from '../../app/hooks';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n}) => {\n  const { id, title, completed } = todo;\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  const isSelected = currentTodo?.id === id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn(\n          { 'has-text-success': completed },\n          { 'has-text-danger': !completed },\n        )}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            dispatch(actions.setTodo(todo));\n          }}\n        >\n          <span className=\"icon\">\n            <i className={cn('far',\n              { 'fa-eye-slash': isSelected },\n              { 'fa-eye': !isSelected })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  return (\n    <>\n      {!todos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => (\n              <TodoInfo\n                key={todo.id}\n                todo={todo}\n              />\n            ))}\n\n          </tbody>\n        </table>\n      )}\n\n    </>\n  );\n};\n","import { useAppDispatch } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\ninterface Props {\n  query: string;\n  todoStatusFilter: Status;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  todoStatusFilter,\n}) => {\n  const dispatch = useAppDispatch();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(filterActions.set({\n      query: value,\n      status: todoStatusFilter,\n    }));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={todoStatusFilter}\n            onChange={(event) => {\n              const { value } = event.target;\n\n              dispatch(filterActions.set({\n                query,\n                status: value as Status,\n              }));\n              // if (value !== todoStatusFilter) {\n              //   setStatusFilter(value as Status);\n              // }\n            }}\n          >\n            {Object.values(Status).map((status) => (\n              <option key={status} value={status}>\n                {status[0].toUpperCase() + status.slice(1)}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.set({\n                query: '',\n                status: todoStatusFilter,\n              }))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import cn from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as todoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n}) => {\n  const dispatch = useDispatch();\n  const [modalUser, setModalUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const loadUser = async () => {\n    setIsLoading(true);\n    setError(false);\n\n    try {\n      const userFromServer = await getUser(todo.id);\n\n      setModalUser(userFromServer);\n    } catch {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {error && (\n        <p className=\"notification is-warning\">\n          Cant load user\n        </p>\n      )}\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(todoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn(\n                { 'has-text-success': todo.completed },\n                { 'has-text-danger': !todo.completed },\n              )}\n              >\n                {!todo.completed ? 'Planned' : 'Done'}\n              </strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {modalUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\nimport { Status } from './types/Status';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\n\nconst getFilteredTodos = (\n  todos: Todo[],\n  filter: Status,\n  query: string,\n): Todo[] => {\n  let filteredTodos: Todo[] = [];\n\n  switch (filter) {\n    case Status.All:\n      filteredTodos = todos;\n      break;\n\n    case Status.Active:\n      filteredTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case Status.Complited:\n      filteredTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default: throw new Error('Wrong todo status');\n  }\n\n  if (query) {\n    const lowerQuery = query.toLowerCase().trim();\n\n    filteredTodos = filteredTodos.filter(({ title }) => (\n      title.toLowerCase().includes(lowerQuery)\n    ));\n  }\n\n  return filteredTodos;\n};\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const {\n    currentTodo: selectedTodo,\n    todos,\n    filter,\n  } = useAppSelector(state => state);\n\n  const { query, status } = filter;\n\n  const [error, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const loadTodos = async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todoActions.add(todosFromServer));\n    } catch {\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const filteredTodos = getFilteredTodos(todos, status, query);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                todoStatusFilter={status}\n              />\n            </div>\n\n            <div className=\"block\">\n              {error && 'Error on loading data from server'}\n\n              {!isLoading && !error\n                ? (\n                  <TodoList\n                    todos={filteredTodos}\n                  />\n                )\n                : <Loader /> }\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}